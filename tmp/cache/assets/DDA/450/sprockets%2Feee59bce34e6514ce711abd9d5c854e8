o: ActiveSupport::Cache::Entry	:@compressedF:@expires_in0:@created_atf1337757798.5816581:@value{	I"length:EFiÊI"digest;
F"%b062a03b3135084962ae74b65deafb9fI"source;
FI"Ê(function() {

  jQuery(function() {
    var SEARCH_URL, append_to_feeder, append_to_hashtag, append_to_owner_list, clear_canvas, create_html, create_image_html, cycle_this, get_hashtag, get_tweets, handle_success, handle_this, init, pop_up_author, randomFromInterval, refresh_dom;
    SEARCH_URL = "http://search.twitter.com/search.json?callback=?";
    create_image_html = function(entitie) {
      var image, url;
      url = entitie[0].media_url;
      return image = "<div id='tweet_media'><img src='" + url + "'/></div>";
    };
    create_html = function(tweet, x, y, z, rotate, scale) {
      var author, close_tweet, media, open_tweet, tweet_element, tweet_text;
      open_tweet = "<div class='step' data-x='" + x + "' data-y='" + y + "' data-z='" + z + "' data-rotate='" + rotate + "'>";
      close_tweet = "</q></div>";
      tweet_text = "<q>" + tweet.text;
      author = pop_up_author(tweet);
      tweet_element = open_tweet + tweet_text + author;
      if (tweet.entities.media !== void 0) {
        console.log(tweet.entities.media);
        media = tweet.entities.media;
        tweet_element += create_image_html(media);
      }
      return tweet_element += close_tweet;
    };
    get_hashtag = function() {
      return gon.hashtag;
    };
    pop_up_author = function(tweet) {
      var author_image, owner_element;
      author_image = tweet.profile_image_url;
      return owner_element = "<div id='owner'><img src='" + author_image + "'/><span>@" + tweet.from_user + "</span></div>";
    };
    append_to_hashtag = function(element) {
      return $("#hashtag").append(element);
    };
    append_to_feeder = function(element) {
      return $("#impress").append(element);
    };
    append_to_owner_list = function(element) {
      return $("#owner_list").append(element);
    };
    cycle_this = function(element, scroll) {
      return $(element).cycle({
        fx: scroll,
        easing: 'easeOutBounce',
        delay: -3000
      });
    };
    randomFromInterval = function(from, to) {
      return Math.floor(Math.random() * (to - from + 1) + from);
    };
    handle_this = function(tweets) {
      var rotate, scale, tweet, x, y, z, _i, _len, _results;
      x = 0;
      y = 0;
      z = 0;
      rotate = 0;
      scale = 1;
      _results = [];
      for (_i = 0, _len = tweets.length; _i < _len; _i++) {
        tweet = tweets[_i];
        _results.push((function(tweet) {
          append_to_feeder(create_html(tweet, x, y, z, rotate, scale));
          x += 1000;
          y = randomFromInterval(1000, 5000);
          rotate = randomFromInterval(0, 360);
          scale += 1;
          return z += randomFromInterval(-300, 300);
        })(tweet));
      }
      return _results;
    };
    clear_canvas = function(element) {
      return $("#impress div").html("");
    };
    handle_success = function() {
      return setInterval("impress().next()", 6000);
    };
    get_tweets = function() {
      return $.getJSON("" + SEARCH_URL, {
        q: "" + gon.hashtag,
        include_entities: true
      }, function(tweets) {
        return handle_this(tweets.results);
      }).success(function() {
        impress().init();
        return handle_success();
      }).error(function() {
        return alert("error");
      });
    };
    init = function() {
      clear_canvas();
      return get_tweets();
    };
    refresh_dom = function() {};
    append_to_hashtag(get_hashtag());
    init();
    return setInterval("window.location.reload()", 120000);
  });

}).call(this);
;
FI"_version;
F"%0fa45476bc5db958136e629d9f5b3d26